[tool.poetry]
name = "zebaro-core-bot"
version = "0.1.0"
description = "ðŸ¤– Multi-platform automation bot with Telegram & Discord bots, FastAPI webhooks, Docker control, GitHub alerts, and job scraping."
authors = ["Zebaro <denok100100@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
aiogram = "^3.22.0"
discord-py = "^2.6.3"
pydantic-settings = "^2.11.0"
docker = "^7.1.0"
apscheduler = "^3.11.0"
pymongo = "^4.15.2"
playwright = "^1.55.0"
playwright-stealth = "^2.0.0"
beautifulsoup4 = "^4.14.2"
uvicorn = "^0.38.0"
fastapi = "^0.119.0"

[tool.poetry.group.dev.dependencies]
# Linting and formatting
black = "^25.9"
isort = "^7.0"
flake8 = "^7.3"
flake8-bugbear = "^24.12"
flake8-pyproject = "^1.2.3"

# Type checking
mypy = "^1.18"

# Testing
pytest = "^8.4"
pytest-mock = "^3.15.1"
pytest-cov = "^7.0"
pytest-asyncio = "^1.2.0"

# Security
bandit = "^1.8"
safety = "^3.6"

# ----------------------------
# Black configuration
# ----------------------------
[tool.black]
line-length = 120
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
)/
'''

# ----------------------------
# isort configuration
# ----------------------------
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["app"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ----------------------------
# Flake8 configuration
# ----------------------------
[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info"
]
per-file-ignores = [
    "__init__.py:F401"
]

# ----------------------------
# MyPy configuration
# ----------------------------
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
disable_error_code = ["no-untyped-def", "import-untyped"]

# ----------------------------
# Pytest configuration
# ----------------------------
[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "--verbose",
    "--color=yes",
    "--strict-markers",
    "--strict-config",
    "--rootdir=."
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning"
]
markers = [
    "asyncio: mark test as asyncio",
    "slow: mark test as slow"
]

# ----------------------------
# Coverage configuration
# ----------------------------
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/version.py",
    "*/setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\b",
    "@(abc\\.)?abstractmethod"
]

# ----------------------------
# Bandit configuration
# ----------------------------
[tool.bandit]
exclude_dirs = ["tests", "test", "docs"]
# Keep only reasonable skips, not the full list
skips = ["B101", "B104"]